---
import { IBlog } from '@types';
import { getTagColor } from '@data';
import Share from '@components/general/Share.astro';

const { id: blog_id, title, date, tags } = Astro.props as IBlog;

function parseTitle(title: string) {
	const chars = title.split('');

	return {
		title: chars.reduce((acc, char) => {
			// If char is emoji
			if (char.charCodeAt(0) > 127) {
				return acc;
			}

			return acc + char;
		}, ''),
		emoji: chars.reduce((acc, char) => {
			// If char is emoji
			if (char.charCodeAt(0) > 127) {
				return acc + char;
			}

			return acc;
		}, ''),
	};
}
---

<Share />

<div id="blog_id" class="hidden">{blog_id}</div>

<div class="flex justify-center text-zinc-900 dark:text-white mb-8">
	<div>
		<a href="/" class="underline text-zinc-900 dark:text-white">Go back</a> in time ‚è∞
	</div>
</div>

<div class="blog-header">
	<div>
		<h1 class="text-4xl my-0 w-fit inline">
			{parseTitle(title).title}
		</h1>
		<div class="text-4xl text-white inline">
			{parseTitle(title).emoji}
		</div>
	</div>

	<p class="text-sm dark:text-gray mb-2">
		{date} | <span id="view-count">1</span> views
	</p>

	<div class="flex gap-x-2 mb-8">
		{
			tags
				.sort((a, b) => a.localeCompare(b))
				.map(tag => (
					<span
						class:list={[
							'text-xs',
							'dark:text-dark',
							'text-light',
							'capitalize',
							'px-2',
							'py-1',
							'rounded-md',
							'font-semibold',
							{
								'bg-green-700': getTagColor(tag) === 'green',
								'bg-indigo-700': getTagColor(tag) === 'blue',
								'bg-purple-700': getTagColor(tag) === 'purple',
								'bg-red-700': getTagColor(tag) === 'red',
							},
						]}
					>
						{tag}
					</span>
				))
		}
	</div>
</div>

<div class="blog-post">
	<slot />
</div>

<div
	class="flex max-w-[720px] mx-auto md:gap-x-4 gap-2 justify-center items-center md:text-base text-sm mb-10 md:flex-row flex-col"
>
	<button
		id="subscribe-popup-button"
		class="h-10 w-full px-4 py-2 bg-zinc-700 hover:bg-zinc-600 transition-colors rounded-md block cursor-pointer text-white text-center"
	>
		Subscribe to my blog
	</button>

	<button
		id="share-button"
		class="h-10 w-full px-4 py-2 transition-colors border-2 border-zinc-800 dark:hover:bg-zinc-800 hover:bg-zinc-300 rounded-md block cursor-pointer text-white text-center"
	>
		Share this knowledge
	</button>

	<a
		class="h-10 w-full px-4 py-2 bg-zinc-700 hover:bg-zinc-600 transition-colors rounded-md block cursor-pointer dark:text-light text-zinc-800 text-center"
		href="mailto:info@vonkprogramming.nl"
	>
		Ask me a question</a
	>
</div>

<script is:inline>
	// Get blog ID
	const blog_id = document.getElementById('blog_id').innerText;

	// Get subscribe button
	const blogPostSubscribeButton = document.getElementById('subscribe-popup-button');

	// Add event listener to show popup
	blogPostSubscribeButton.addEventListener('click', () => {
		document.querySelector('#subscribe-component').classList.add('flex');
		document.querySelector('#subscribe-component').classList.remove('hidden');
	});

	// Get viewed blogs from local storage
	const viewedBlogs = JSON.parse(localStorage.getItem('viewed-blogs')) || [];

	// Fetch view count to display to user
	fetch(`/view.php?blog_id=${blog_id}`)
		.then(response => response.text())
		.then(data => {
			// Check if result is number
			if (isNaN(data)) {
				return;
			}

			document.getElementById('view-count').innerText = data;
		})
		.catch(error => {
			console.log('Error:', error);
		});

	// Check if blog has been viewed before
	if (!viewedBlogs.includes(blog_id)) {
		// Add blog to viewed blogs
		viewedBlogs.push(blog_id);
		localStorage.setItem('viewed-blogs', JSON.stringify(viewedBlogs));

		// Fetch IP address and send to server
		fetch('https://api.ipify.org?format=json')
			.then(response => response.json())
			.then(data =>
				// Send view to server
				fetch('/view.php', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						blog_id,
						ip_address: data.ip,
					}),
				}),
			)
			.then(response => response.text())
			.then(data => {
				if (isNaN(data)) {
					return;
				}

				// Update view count
				document.getElementById('view-count').innerText = data;
			})
			.catch(error => {
				console.log('Error:', error);
			});
	}

	// Get share button
	const shareButton = document.getElementById('share-button');

	// Add event listener to share button
	shareButton.addEventListener('click', () => {
		document.querySelector('#share-component').classList.add('flex');
		document.querySelector('#share-component').classList.remove('hidden');
	});
</script>
